---
- name: Install Postgres Server
  user: root
  hosts: all
  vars:
     pguser: postgres
     pgpass: redhat
     dbname: redmine_production
     dbuser: redmine
     dbpass: password
  tasks:
  
   - name: sleep for 30 seconds to contact VM
     wait_for: timeout=60
  
   - name: Open PostgreSQL port in firewall
     firewalld:
       port=5432/tcp
       permanent=true
       state=enabled
       immediate=yes
     ignore_errors: yes
  
   - name: Install packages
     yum: name={{ item }}
          state=installed
     with_items:
      - python-psycopg2
      - postgresql-server
      - postgresql
  
   - name: Initiate database
     command: service postgresql initdb
              creates=/var/lib/pgsql/data/postgresql.conf


   - name: Start PostgreSQL and enable at boot
     service: name=postgresql
              enabled=yes
              state=started
  

   - name: Add user postgres
     action: user name={{ pguser }} password={{ pgpass }}

   - name: Ensure PostgreSQL is listening on all interfaces
     lineinfile: dest=/var/lib/pgsql/data/postgresql.conf
       regexp='^#?listen_addresses\s*='
       line="listen_addresses = '0.0.0.0'"
       state=present
     notify: restart postgresql
     
   - name: Ensure PostgreSQL allow connection from remote clients
     lineinfile: dest=/var/lib/pgsql/data/pg_hba.conf
                 regexp='host\s+all\s+all\s+127.0.0.1/32'
                 line='host\tall\tall\tall\tmd5'
                 insertbefore=BOF
     notify: restart postgresql

   - name: Ensure database is created
     postgresql_db: name={{ dbname }}
                 encoding='UTF-8'
                 lc_collate='en_US.UTF-8'
                 lc_ctype='en_US.UTF-8'
                 template='template0'
                 state=present
     become: true
     become_user: "{{ pguser }}"

   - name: Ensure user has access to the database
     postgresql_user: db={{ dbname }}
                   name={{ dbuser }}
                   password={{ dbpass }}
                   priv=ALL
                   state=present
     become: true
     become_user: "{{ pguser }}"

   - name: Ensure user does not have unnecessary privileges
     postgresql_user: name={{ dbuser }}
                   role_attr_flags=NOSUPERUSER,NOCREATEDB
                   state=present
     become: true
     become_user: "{{ pguser }}"

  handlers:
   - name: restart postgresql
     service: name=postgresql state=restarted
